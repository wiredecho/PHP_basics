<!-- The modern internet is user-driven; all the actual content of a website is generated by the users of a website. How does the user manage to get his or her data to the page? One word: forms. The HTML forms you used to build is the way in which users are able to pass data to the back end of a website where it can be processed and stored. Designing forms and processing the information correctly is a huge part of what it takes to become a back-end developer. 
 -->


<form action='process.php' method='post'>
    First-name:<input type='text' name='first_name'>
    Last-name: <input type='text' name='last_name'>
    Email address: <input type='text' name='email'>
    <input type='submit' value='add user!'>
</form>




<!-- The form tag
Everything contained within the HTML form tags can be transmitted to another page; a feat we have not yet been able to do. How does this happen? Well, let's take a look at the attributes of the form tag.

The action attribute
The form's action attribute will be set equal to the file name where the information, contained within the form, will be sent to. In this case, we are going to send the information to 'process.php'. So that means all of our code that will handle this form data will be contained in process.php.

Note: process.php is just a file name. You can send your form to whatever file name you like. Just make sure that it's a .php file. For the remainder of the chapter, we will continue to refer to this page as process.php so it doesn't hurt to follow the same conventions!

The method attribute
There are two values that you will see this attribute being set to: get and post. If you remember HTTP requests, then you will remember that GET and POST are the two types of HTTP request methods that are most common. A GET request is for insensitive information and a POST request is for passing sensitive information. 

The method attribute specifies the type of HTTP request by how you, as the developer, want to have your form information transferred. If your form data contains password data, credit card numbers, SSNs, etc, please use POST! If the information is like a library search or something insensitive, use GET as your method.

The input element
The form tag will set up all of the logistics, but the information you want to gather will be harvested from the elements you place within the form. In our basic example, we have just one type of input, a text field. There are several different input types that can gather data:

text - a basic collector for text
radio button - when you want the user to select from a number of options
password - like text but the text entered will be disguised (as circles!)
checkbox - when a user must be prompted for a yes or no type argument
See the rest here!
Once you have selected all the input elements you want to include in your form, you must give each of them a name attribute if you want each input to be recognized by your server-side code. The name attribute will be how the data gets referred to on the back end of your codes. Notice in our form above, we give a name to each input element that reflects the information we want to gather.

Accessing Your Form Data via Post
Once the input which has a type 'submit' is clicked by your user, the data within your form will be submitted to the URL specified by your form's 'action' attribute. So let's head to our process.php code and do some inspecting! The only thing you need to type within your PHP tags is this:

var_dump($_POST); -->

<!-- 
The variable we are passing to the var_dump() function is called the $_POST variable. It is an associative array whose key value pairs correspond to the name and values of the input elements contained in your form.

If your form's method is 'get', the same information would be contained in a variable called, you guessed it, $_GET. These two special variables, $_POST and $_GET are called superglobals; they are globally available whenever they are present. They are single-serving associative arrays that contain data from a particular form or even URL, but we'll get there later! By single-serving, we mean that they are only available for one URL request on the page they are created. That means that when the browser leaves the process.php page, the $_POST and/or $_GET variables that existed on that page will be destroyed.

VERY IMPORTANT:

Pages like process.php are designated for processing user inputs. Now that you have access to user-generated data, you can do many things with it! What are some things you might want to do with all of this data? You could...

Manipulate it
Validate it
Print it on the screen
Put it into a database
Pass it to another page
All of the above!
You will be able to do all of these things in a very short time! Hold fast!    -->